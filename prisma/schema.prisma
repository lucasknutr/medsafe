generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "auth"]
}

model User {
  id             Int             @id @default(autoincrement())
  name           String
  email          String          @unique
  cpf            String          @unique
  profession     String
  phone          String
  address        String
  city           String
  state          String
  zip_code       String
  policy_id      Int?
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  password       String
  role           String          @default("SEGURADO")
  asaasCustomerId String?        @unique @map("asaas_customer_id")
  insurance      Insurance?
  paymentMethods PaymentMethod[]
  processes      Process[]
  transactions   Transaction[]
  policy         Policy?         @relation(fields: [policy_id], references: [id])
  @@schema("public")
}

model Insurance {
  id           Int           @id @default(autoincrement())
  userId       Int           @unique
  plan         String
  status       String
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
  @@schema("public")
}

model Policy {
  id                Int      @id @default(autoincrement())
  policy_number     String   @unique
  start_date        DateTime
  end_date          DateTime
  total_insured     Int
  total_value       Float
  is_extended       Boolean  @default(false)
  new_policy_id     Int?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  new_policy        Policy?  @relation("PolicyExtension", fields: [new_policy_id], references: [id])
  extended_policies Policy[] @relation("PolicyExtension")
  users             User[]
  @@schema("public")
}

model Process {
  id                  Int      @id @default(autoincrement())
  user_id             Int
  lawyer_id           Int
  case_number         String   @unique
  plaintiff           String
  defendant           String
  location            String
  status              String
  accident_date       DateTime
  contract_date       DateTime
  case_value          Float
  is_covered          Boolean  @default(false)
  probability_of_loss Int
  total_cost          Float
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  lawyer              Lawyer   @relation(fields: [lawyer_id], references: [id])
  user                User     @relation(fields: [user_id], references: [id])
  @@schema("public")
}

model Lawyer {
  id         Int       @id @default(autoincrement())
  name       String
  email      String    @unique
  cpf        String    @unique
  phone      String
  address    String
  city       String
  state      String
  zip_code   String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  processes  Process[]
  @@schema("public")
}

model Broker {
  id               Int      @id @default(autoincrement())
  name             String
  email            String   @unique
  cpf              String   @unique
  phone            String
  address          String
  city             String
  state            String
  zip_code         String
  commission_rules Json
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  @@schema("public")
}

model LegalAction {
  id         Int      @id @default(autoincrement())
  name       String
  cost       Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  @@schema("public")
}

model PaymentMethod {
  id           Int           @id @default(autoincrement())
  userId       Int
  type         String
  lastFour     String?
  brand        String?
  holderName   String?
  expiryMonth  String?
  expiryYear   String?
  isDefault    Boolean       @default(false)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
  @@unique([userId, type], name: "userId_type_type")
  @@schema("public")
}

model Transaction {
  id              Int            @id @default(autoincrement())
  userId          Int
  paymentMethodId Int?
  amount          Int
  status          String
  type            String
  transactionId   String?
  couponCode      String?
  paymentDetails  String? 
  planNameSnapshot String? 
  planPriceSnapshot Float?    
  boletoUrl       String?
  boletoCode      String?
  insuranceId     Int?
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  insurance       Insurance?     @relation(fields: [insuranceId], references: [id])
  paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  user            User           @relation(fields: [userId], references: [id])
  @@schema("public")
}

model ServiceBox {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  imageUrl    String
  link        String
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@schema("public")
}

model Slide {
  id          Int      @id @default(autoincrement())
  image       String
  title       String
  description String
  buttonLink  String   @map("button_link")
  order       Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  @@schema("public")
}

model InsurancePlan {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  features    String[]
  isActive    Boolean  @default(true)
  asaasPlanId String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@schema("public")
}